{
  "swagger": "2.0",
  "info": {
    "description": "API Documentation for Snicks, the ecommerce store for mens sneakers at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "1.0.0",
    "title": "API Documentation for Snicks",
    "contact": {
      "email": "stepheng323@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:4000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": ["http", "https"],
  "securityDefinitions": {
    "BearerToken": {
      "type": "apiKey",
      "description": "All protected routes must be accessed with a Bearer Token.The JWT Token is generated by the API upon user login.",
      "name": "Authorization",
      "in": "header"
    }
  },
  "paths": {
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "A person can creat an account.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserLoginResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/UserSignupConflict"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The email for login",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserLoginResponse"
            }
          },
          "400": {
            "description": "Invalid login parameters",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "401": {
            "description": "Invalid email/password combination",
            "schema": {
              "$ref": "#/definitions/InvalidLogin"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/user/forgot-password": {
      "post": {
        "tags": ["user"],
        "summary": "User make a password rest request",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Email address",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid login parameters",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/user/refresh-token": {
      "get": {
        "tags": ["user"],
        "summary": "User generate a new token with thier refresh token",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "refreshToken",
            "in": "cookie",
            "description": "The users refresh token",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid login parameters",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties": {
                "success": false,
                "messge": "No token found"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/user/reset-forgot-password": {
      "post": {
        "tags": ["user"],
        "summary": "User make a password rest",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "resetToken",
            "in": "query",
            "description": "Reset Token",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PasswordUpdatedResponse"
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/product": {
      "post": {
        "tags": ["product"],
        "security": [{ "BearerToken": [] }],
        "summary": "Add product",
        "description": "Admin user can add a product",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddProduct"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AddProductSuccessResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "get": {
        "tags": ["product"],
        "summary": "All products",
        "description": "View all products in the store",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "",
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "403": {
            "description": "Insufficient permission",
            "schema": {
              "$ref": "#/definitions/ForbiddenResponse"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/NoResultResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/product/{productId}": {
      "get": {
        "tags": ["product"],
        "summary": "Find product by ID",
        "description": "View a products in the store",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Id of the product to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/AddProductSuccessResponse"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/NoResultResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/product/presignUrl": {
      "get": {
        "tags": ["product"],
        "security": [{ "BearerToken": [] }],
        "summary": "Get Presign Url",
        "description": "Admin user can get presignurl for uploading to s3bucket",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PresignUrlResponse"
            }
          },
          "403": {
            "description": "Insufficient permission",
            "schema": {
              "$ref": "#/definitions/ForbiddenResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/cart/{productId}": {
      "post": {
        "tags": ["cart"],
        "security": [{ "BearerToken": [] }],
        "summary": "Add product to cart",
        "description": "An authenticated user can add product to cart",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Id of the product to add to cart",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CartResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NoResultResponse"
            }
          },
          "401": {
            "description": "Authentication Error",
            "schema": {
              "$ref": "#/definitions/InvalidLogin"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/BadRequest"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/cart": {
      "get": {
        "tags": ["cart"],
        "security": [{ "BearerToken": [] }],
        "summary": "View Products in cart",
        "description": "An authenticated user can add view products in cart",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NoResultResponse"
            }
          },
          "401": {
            "description": "Authentication Error",
            "schema": {
              "$ref": "#/definitions/InvalidLogin"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    },
    "/cart/{cartId}": {
      "delete": {
        "tags": ["cart"],
        "security": [{ "BearerToken": [] }],
        "summary": "Delete a product from cart",
        "description": "A user can delete his/her item from cart",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Id of the cart Item to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NoResultResponse"
            }
          },
          "401": {
            "description": "Authentication Error",
            "schema": {
              "$ref": "#/definitions/InvalidLogin"
            }
          },
          "403": {
            "description": "Insufficient permission",
            "schema": {
              "$ref": "#/definitions/ForbiddenResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      },
      "patch": {
        "tags": ["cart"],
        "security": [{ "BearerToken": [] }],
        "summary": "update a product in cart",
        "description": "An user can update his/her cart item",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "description": "Id of the cart Item to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "description": "",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/NoResultResponse"
            }
          },
          "401": {
            "description": "Authentication Error",
            "schema": {
              "$ref": "#/definitions/InvalidLogin"
            }
          },
          "403": {
            "description": "Insufficient permission",
            "schema": {
              "$ref": "#/definitions/ForbiddenResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ServerError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "UserLogin": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "stepheng323@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "olaTUNDELA234"
        }
      }
    },
    "UserLoginResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "User logged in successfully"
        },
        "payload": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "email": {
              "type": "string",
              "example": "stepheng323@gmail.com"
            },
            "firstName": {
              "type": "string",
              "example": "Jon"
            },
            "lastName": {
              "type": "string",
              "example": "Doe"
            },
            "phone": {
              "type": "string",
              "example": "09239944955"
            },
            "role": {
              "type": "string",
              "example": "user"
            },
            "token": {
              "type": "string",
              "example": "eejffioffhbdbfdkfhfdhlfkd.fdbhdhfldhfyofhbdfdfvgdvfgdkjf.fdgkvfvgdfvdjhfldogvkdsfgdls"
            },
            "tokenExpiry": {
              "type": "integer",
              "example": 2873844984
            }
          }
        }
      }
    },
    "PasswordUpdatedResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "User logged in successfully"
        },
        "payload": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "example": 1
            },
            "email": {
              "type": "string",
              "example": "stepheng323@gmail.com"
            },
            "firstName": {
              "type": "string",
              "example": "Jon"
            },
            "lastName": {
              "type": "string",
              "example": "Doe"
            },
            "phone": {
              "type": "string",
              "example": "09239944955"
            },
            "role": {
              "type": "string",
              "example": "user"
            },
            "token": {
              "type": "string",
              "example": "eejffioffhbdbfdkfhfdhlfkd.fdbhdhfldhfyofhbdfdfvgdvfgdkjf.fdgkvfvgdfvdjhfldogvkdsfgdls"
            },
            "tokenExpiry": {
              "type": "integer",
              "example": 2873844984
            }
          }
        }
      }
    },
    "CreateUser": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "email": {
          "type": "string",
          "example": "stepheng323@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "12345"
        },
        "phone": {
          "type": "string",
          "example": "080888348"
        },
        "role": {
          "type": "string",
          "example": "user"
        },
        "token": {
          "type": "string",
          "example": "eejffioffhbdbfdkfhfdhlfkd.fdbhdhfldhfyofhbdfdfvgdvfgdkjf.fdgkvfvgdfvdjhfldogvkdsfgdls"
        },
        "tokenExpiry": {
          "type": "integer",
          "example": 2873844984
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "UserSignupConflict": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": false
        },
        "message": {
          "type": "string",
          "example": "a user with the email exist"
        },
        "payload": {
          "type": "object"
        }
      }
    },
    "InvalidLogin": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": false
        },
        "message": {
          "type": "string",
          "example": "Invalid email/password combination"
        }
      }
    },
    "BadRequest": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": false
        },
        "message": {
          "type": "string",
          "example": "firstname is required"
        }
      }
    },
    "ServerError": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": false
        },
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },
    "AddProduct": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Airforce 1",
          "required": "true"
        },
        "description": {
          "type": "string",
          "example": "Nike Men's Air Force 1 Low Sneaker and other Basketball at Amazon.com. Our wide selection is eligible for free shipping and free returns",
          "required": "true"
        },
        "specification": {
          "type": "string",
          "example": "Airforce 1 Lows",
          "required": "true"
        },
        "price": {
          "type": "number",
          "example": "27000",
          "required": "true"
        },
        "colors": {
          "type": "array",
          "example": ["white, black"],
          "required": "true"
        },
        "images": {
          "type": "array",
          "example": ["https://aws.s3.bucket/asdjf/fjhad"],
          "required": "true"
        },
        "brandId": {
          "type": "number",
          "example": 1,
          "required": "true"
        },
        "sizes": {
          "type": "array",
          "example": [39, 42, 43, 45],
          "required": "true"
        }
      }
    },
    "AddProductSuccessResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "payload": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 1
            },
            "userId": {
              "type": "number",
              "example": 1
            },
            "title": {
              "type": "string",
              "example": 1
            },
            "price": {
              "type": "number",
              "example": 27000
            },
            "colors": {
              "type": "array",
              "example": ["white"]
            },
            "images": {
              "type": "array",
              "example": ["https://aws.s3.bucket/asdjf/fjhad"]
            },
            "specification": {
              "type": "string",
              "example": ["https://aws.s3.bucket/asdjf/fjhad"]
            },
            "brandId": {
              "type": "number",
              "example": 1
            },
            "sizes": {
              "type": "array",
              "example": [40, 41, 42, 43]
            }
          }
        }
      }
    },
    "ForbiddenResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": false
        },
        "message": {
          "type": "string",
          "example": "you do not have the permission"
        }
      }
    },
    "NoResultResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": false
        },
        "message": {
          "type": "string",
          "example": "No result found"
        }
      }
    },
    "PresignUrlResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "presigned url generated successfully"
        },
        "payload": {
          "type": "object",
          "properties": {
            "url": {
              "type": "url",
              "example": "https://snicks.s3.us-west-2.amazonaws.com/2/d5afb3f5-f042-4dd9-a3ca-199d95d8e8e5.jpeg?Content-Type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAY57EQNZUK2HH7J5V%2F20210316%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20210316T115958Z&X-Amz-Expires=900&X-Amz-Signature=22c2ce8445f4dcf072ec57479869b5a329a134e8ab9066f8140ede99908b793e&X-Amz-SignedHeaders=host"
            },
            "key": {
              "type": "string",
              "example": "2/d5afb3f5-f042-4dd9-a3ca-199d95d8e8e5.jpeg"
            }
          }
        }
      }
    },
    "CartResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "example": true
        },
        "message": {
          "type": "string",
          "example": "Item added to cart succesfully"
        },
        "payload": {
          "type": "object",
          "properties": {
            "id": {
              "type": "number",
              "example": 2
            },
            "userId": {
              "type": "number",
              "example": 3
            },
            "productId": {
              "type": "number",
              "example": 7
            },
            "quantuty": {
              "type": "number",
              "example": 1
            }
          }
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
